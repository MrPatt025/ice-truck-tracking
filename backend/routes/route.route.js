// routes/route.route.js
const router = require('express').Router();
const db = require('../config/db');
const auth = require('../middleware/auth');

// ‚úÖ Debug endpoint - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ authentication
router.get('/debug', async (req, res) => {
  try {
    console.log('üîç Debug: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á...');
    const [routes] = await db.query(`
      SELECT r.*, 
             COUNT(rd.id) as shop_count,
             GROUP_CONCAT(DISTINCT rd.truck_id) as assigned_trucks
      FROM routes r
      LEFT JOIN route_details rd ON r.id = rd.route_id
      GROUP BY r.id
      ORDER BY r.created_at DESC
    `);
    console.log('‚úÖ Debug: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á:', routes);
    res.json(routes);
  } catch (err) {
    console.error('‚ùå Debug: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
    res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ', error: err.message });
  }
});

// ‚úÖ Debug endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö trucks-shops - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ authentication
router.get('/debug/trucks-shops', async (req, res) => {
  try {
    console.log('üîç Debug: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡πÅ‡∏•‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤...');
    const [trucks] = await db.query('SELECT truck_id as truck_code, license_plate, model, color FROM trucks ORDER BY truck_id');
    console.log('‚úÖ Debug: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ:', trucks);
    const [shops] = await db.query('SELECT shop_id as shop_code, shop_name, address, lat as latitude, lng as longitude FROM shops ORDER BY shop_name');
    console.log('‚úÖ Debug: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤:', shops);
    
    res.json({ trucks, shops });
  } catch (err) {
    console.error('‚ùå Debug: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡πÅ‡∏•‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
    res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ', error: err.message });
  }
});

// ‚úÖ GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get('/', auth(['admin', 'owner', 'driver']), async (req, res) => {
  try {
    console.log('üîç API: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á...');
    console.log('üë§ User:', req.user);
    const [routes] = await db.query(`
      SELECT r.*, 
             COUNT(rd.id) as shop_count,
             GROUP_CONCAT(DISTINCT rd.truck_id) as assigned_trucks
      FROM routes r
      LEFT JOIN route_details rd ON r.id = rd.route_id
      GROUP BY r.id
      ORDER BY r.created_at DESC
    `);
    console.log('‚úÖ API: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á:', routes);
    res.json(routes);
  } catch (err) {
    console.error('‚ùå API: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
    res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ', error: err.message });
  }
});

// ‚úÖ GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡∏≤‡∏° ID ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
router.get('/:id', auth(['admin', 'owner']), async (req, res) => {
  try {
    const routeId = req.params.id;
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
    const [routes] = await db.query('SELECT * FROM routes WHERE id = ?', [routeId]);
    if (routes.length === 0) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£' });
    }

    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á (‡∏£‡∏ñ‡πÅ‡∏•‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤)
    const [details] = await db.query(`
      SELECT rd.*, 
             t.truck_id as truck_code, t.license_plate, t.model, t.color,
             s.shop_id as shop_code, s.shop_name, s.address, s.lat as latitude, s.lng as longitude
      FROM route_details rd
      LEFT JOIN trucks t ON rd.truck_id = t.truck_id
      LEFT JOIN shops s ON rd.shop_id = s.shop_id
      WHERE rd.route_id = ?
      ORDER BY rd.truck_id, rd.delivery_order
    `, [routeId]);

    res.json({
      route: routes[0],
      details: details
    });
  } catch (err) {
    console.error('‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
    res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ', error: err.message });
  }
});

// ‚úÖ POST: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
router.post('/', auth(['admin']), async (req, res) => {
  const { route_name, description, route_details } = req.body;

  if (!route_name || !route_details || !Array.isArray(route_details)) {
    return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î' });
  }

  const connection = await db.getConnection();
  try {
    await connection.beginTransaction();

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
    const [result] = await connection.query(
      'INSERT INTO routes (route_name, description) VALUES (?, ?)',
      [route_name, description || null]
    );
    const routeId = result.insertId;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
    for (const detail of route_details) {
      const { truck_id, shop_id, delivery_order, estimated_time } = detail;
      
      if (!truck_id || !shop_id || !delivery_order) {
        throw new Error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
      }

      await connection.query(`
        INSERT INTO route_details (route_id, truck_id, shop_id, delivery_order, estimated_time)
        VALUES (?, ?, ?, ?, ?)
      `, [routeId, truck_id, shop_id, delivery_order, estimated_time || null]);
    }

    await connection.commit();
    res.json({ message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', route_id: routeId });
  } catch (err) {
    await connection.rollback();
    console.error('‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
    res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ', error: err.message });
  } finally {
    connection.release();
  }
});

// ‚úÖ PUT: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
router.put('/:id', auth(['admin']), async (req, res) => {
  const routeId = req.params.id;
  const { route_name, description, route_details } = req.body;

  if (!route_name) {
    return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á' });
  }

  const connection = await db.getConnection();
  try {
    await connection.beginTransaction();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const [existing] = await connection.query('SELECT id FROM routes WHERE id = ?', [routeId]);
    if (existing.length === 0) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
    await connection.query(
      'UPDATE routes SET route_name = ?, description = ? WHERE id = ?',
      [route_name, description || null, routeId]
    );

    // ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏Å‡πà‡∏≤
    await connection.query('DELETE FROM route_details WHERE route_id = ?', [routeId]);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏´‡∏°‡πà
    if (route_details && Array.isArray(route_details)) {
      for (const detail of route_details) {
        const { truck_id, shop_id, delivery_order, estimated_time } = detail;
        
        if (!truck_id || !shop_id || !delivery_order) {
          throw new Error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
        }

        await connection.query(`
          INSERT INTO route_details (route_id, truck_id, shop_id, delivery_order, estimated_time)
          VALUES (?, ?, ?, ?, ?)
        `, [routeId, truck_id, shop_id, delivery_order, estimated_time || null]);
      }
    }

    await connection.commit();
    res.json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (err) {
    await connection.rollback();
    console.error('‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
    res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ', error: err.message });
  } finally {
    connection.release();
  }
});

// ‚úÖ DELETE: ‡∏•‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
router.delete('/:id', auth(['admin']), async (req, res) => {
  const connection = await db.getConnection();
  try {
    const routeId = req.params.id;
    
    await connection.beginTransaction();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const [existing] = await connection.query('SELECT id FROM routes WHERE id = ?', [routeId]);
    if (existing.length === 0) {
      await connection.rollback();
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö' });
    }

    console.log('üóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á ID:', routeId);
    
    // ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô (route_details)
    const [deletedDetails] = await connection.query('DELETE FROM route_details WHERE route_id = ?', [routeId]);
    console.log('üóëÔ∏è ‡∏•‡∏ö route_details ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:', deletedDetails.affectedRows, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    
    // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á (route_assignments) ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    const [deletedAssignments] = await connection.query('DELETE FROM route_assignments WHERE route_id = ?', [routeId]);
    console.log('üóëÔ∏è ‡∏•‡∏ö route_assignments ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:', deletedAssignments.affectedRows, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    
    // ‡∏•‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å (routes)
    const [deletedRoute] = await connection.query('DELETE FROM routes WHERE id = ?', [routeId]);
    console.log('üóëÔ∏è ‡∏•‡∏ö routes ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:', deletedRoute.affectedRows, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    
    await connection.commit();
    console.log('‚úÖ ‡∏•‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    
    res.json({ 
      message: '‡∏•‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      deleted_route_details: deletedDetails.affectedRows,
      deleted_assignments: deletedAssignments.affectedRows,
      deleted_routes: deletedRoute.affectedRows
    });
  } catch (err) {
    await connection.rollback();
    console.error('‚ùå ‡∏•‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
    res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ', error: err.message });
  } finally {
    connection.release();
  }
});

// ‚úÖ GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡πÅ‡∏•‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
router.get('/data/trucks-shops', auth(['admin', 'owner', 'driver']), async (req, res) => {
  try {
    console.log('üîç API: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡πÅ‡∏•‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤...');
    console.log('üë§ User:', req.user);
    const [trucks] = await db.query('SELECT truck_id as truck_code, license_plate, model, color FROM trucks ORDER BY truck_id');
    console.log('‚úÖ API: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ:', trucks);
    const [shops] = await db.query('SELECT shop_id as shop_code, shop_name, address, lat as latitude, lng as longitude FROM shops ORDER BY shop_name');
    console.log('‚úÖ API: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤:', shops);
    
    res.json({ trucks, shops });
  } catch (err) {
    console.error('‚ùå API: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡πÅ‡∏•‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
    res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ', error: err.message });
  }
});

// ‚úÖ GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡∏Ñ‡∏±‡∏ô‡πÉ‡∏î‡∏Ñ‡∏±‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á
router.get('/truck/:truckId', auth(['admin', 'owner', 'driver']), async (req, res) => {
  try {
    const truckId = req.params.truckId;
    
    const [routes] = await db.query(`
      SELECT rd.*, 
             r.route_name, r.description,
             s.shop_id as shop_code, s.shop_name, s.address, s.lat as latitude, s.lng as longitude,
             ra.status as assignment_status, ra.assigned_date
      FROM route_details rd
      LEFT JOIN routes r ON rd.route_id = r.id
      LEFT JOIN shops s ON rd.shop_id = s.shop_id
      LEFT JOIN route_assignments ra ON rd.route_id = ra.route_id AND rd.truck_id = ra.truck_id
      WHERE rd.truck_id = ?
      ORDER BY ra.assigned_date DESC, rd.delivery_order
    `, [truckId]);

    res.json(routes);
  } catch (err) {
    console.error('‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏£‡∏ñ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
    res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏£‡∏ñ‡πÑ‡∏î‡πâ', error: err.message });
  }
});

module.exports = router;
