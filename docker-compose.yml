# Docker Compose file for Ice Truck Tracking System

services:
  # Backend API
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    ports:
      - '5000:5000'
    environment:
      - NODE_ENV=production
      - PORT=5000
      - JWT_SECRET=ice-truck-tracking-super-secret-jwt-key-2025
      - SALT_ROUNDS=12
      - CLIENT_URL=http://localhost:3000
      - DB_URL=./database.sqlite
    volumes:
      - ./apps/backend/database.sqlite:/app/database.sqlite
    networks:
      - ice-truck-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:5000/api/v1/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Dashboard
  dashboard:
    build:
      context: ./apps/dashboard
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:5000
      - NEXT_PUBLIC_WS_URL=ws://backend:5000
    depends_on:
      - backend
    networks:
      - ice-truck-network

  # Notification Service
  notification:
    build:
      context: ./packages/sdk-edge
      dockerfile: Dockerfile
    ports:
      - '3002:3002'
    environment:
      - NODE_ENV=production
      - PORT=3002
    networks:
      - ice-truck-network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alerts/alert-rules.yml:/etc/prometheus/alert-rules.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - ice-truck-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    networks:
      - ice-truck-network

  # Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - '9100:9100'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - ice-truck-network

  # cAdvisor
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - '8080:8080'
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - ice-truck-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    networks:
      - ice-truck-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - dashboard
    networks:
      - ice-truck-network

volumes:
  grafana-storage:
  redis-data:

networks:
  ice-truck-network:
    driver: bridge
