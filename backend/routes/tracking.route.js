const router = require('express').Router();
const db = require('../config/db');
const auth = require('../middleware/auth');
const AlertService = require('../services/alertService');

// ‚úÖ GET - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (admin/owner)
router.get('/', auth(['admin', 'owner']), async (req, res) => {
  try {
    const [rows] = await db.query(`SELECT * FROM tracking ORDER BY timestamp DESC`);
    res.json(rows);
  } catch (err) {
    console.error('‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
    res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÑ‡∏î‡πâ', error: err.message });
  }
});

// ‚úÖ POST - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° (driver)
router.post('/', auth(['driver']), async (req, res) => {
  const {
    shop_id,
    latitude,
    longitude,
    truck_id,
    driver_id,
    gps_code
  } = req.body;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
  if (!shop_id || !latitude || !longitude || !truck_id || !driver_id || !gps_code) {
    return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
  }

  if (isNaN(Number(latitude)) || isNaN(Number(longitude))) {
    return res.status(400).json({ message: 'latitude ‡πÅ‡∏•‡∏∞ longitude ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç' });
  }

  try {
    await db.query(
      `INSERT INTO tracking 
        (shop_id, latitude, longitude, truck_id, driver_id, gps_code, timestamp) 
       VALUES (?, ?, ?, ?, ?, ?, ?)`,
      [
        shop_id,
        Number(latitude),
        Number(longitude),
        truck_id,
        driver_id,
        gps_code,
        new Date()
      ]
    );

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á trucks
    await db.query(
      'UPDATE trucks SET latitude = ?, longitude = ?, updated_at = NOW() WHERE truck_id = ?',
      [Number(latitude), Number(longitude), truck_id]
    );

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    const [truckRows] = await db.query(
      'SELECT truck_id, license_plate FROM trucks WHERE truck_id = ?',
      [truck_id]
    );

    if (truckRows.length > 0) {
      const truckCode = truckRows[0].license_plate || truck_id;
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏ñ‡∏Ñ‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ
      const [routeRows] = await db.query(`
        SELECT s.lat, s.lng 
        FROM route_details rd
        JOIN shops s ON rd.shop_id = s.shop_id
        WHERE rd.truck_id = ? AND rd.status = 'in_progress'
        ORDER BY rd.delivery_order
      `, [truck_id]);

      const routeLocations = routeRows.map(row => ({
        latitude: row.lat,
        longitude: row.lng
      }));

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      const [lastMovementRows] = await db.query(`
        SELECT timestamp FROM tracking 
        WHERE truck_id = ? AND (latitude != ? OR longitude != ?)
        ORDER BY timestamp DESC LIMIT 1
      `, [truck_id, Number(latitude), Number(longitude)]);

      const lastMovementTime = lastMovementRows.length > 0 ? lastMovementRows[0].timestamp : new Date();

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
      const [prevTrackingRows] = await db.query(`
        SELECT latitude, longitude, timestamp FROM tracking 
        WHERE truck_id = ? 
        ORDER BY timestamp DESC LIMIT 2
      `, [truck_id]);

      let currentSpeed = 0;
      if (prevTrackingRows.length >= 2) {
        const prev = prevTrackingRows[1];
        const current = prevTrackingRows[0];
        const distance = AlertService.calculateDistance(
          prev.latitude, prev.longitude,
          current.latitude, current.longitude
        );
        const timeDiff = (new Date(current.timestamp) - new Date(prev.timestamp)) / (1000 * 60 * 60); // ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        currentSpeed = timeDiff > 0 ? distance / timeDiff : 0;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      const trackingData = {
        location: { latitude: Number(latitude), longitude: Number(longitude) },
        route: routeLocations,
        lastMovementTime: lastMovementTime,
        speed: currentSpeed
      };

      await AlertService.runAllChecks(truckCode, trackingData);
    }

    res.json({ message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (err) {
    console.error('‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å tracking ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
    res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ', error: err.message });
  }
});

// ‚úÖ GET - ‡∏î‡∏π‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏±‡∏ô (admin/owner)
router.get('/all', auth(['admin', 'owner']), async (req, res) => {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á trucks ‡∏ó‡∏µ‡πà‡∏°‡∏µ GPS ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏à‡∏≤‡∏Å Tracking.js)
    const [rows] = await db.query(`
      SELECT 
        t.truck_id,
        t.latitude,
        t.longitude,
        t.updated_at,
        d.driver_id,
        d.full_name AS driver_name,
        t.license_plate,
        t.model,
        t.color,
        t.gps_id
      FROM trucks t
      LEFT JOIN drivers d ON t.driver_id = d.driver_id
      WHERE t.latitude IS NOT NULL 
        AND t.longitude IS NOT NULL
        AND t.updated_at IS NOT NULL
        AND t.updated_at >= DATE_SUB(NOW(), INTERVAL 10 MINUTE)
      ORDER BY t.updated_at DESC
    `);
    
    console.log('üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á:', rows.length, '‡∏Ñ‡∏±‡∏ô');
    res.json(rows);
  } catch (err) {
    console.error('‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ñ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏±‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
    res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡πÑ‡∏î‡πâ', error: err.message });
  }
});

module.exports = router;
