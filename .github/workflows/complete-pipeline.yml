name: Complete CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  TERRAFORM_VERSION: '1.6.0'

jobs:
  # Stage 1: Lint and Format
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, dashboard]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/package-lock.json
      
      - name: Install dependencies
        run: npm ci
        working-directory: ${{ matrix.service }}
      
      - name: Run ESLint
        run: npm run lint
        working-directory: ${{ matrix.service }}
      
      - name: Check Prettier formatting
        run: npm run format -- --check
        working-directory: ${{ matrix.service }}

  # Stage 2: Tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        service: [backend, dashboard]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/package-lock.json
      
      - name: Install dependencies
        run: npm ci
        working-directory: ${{ matrix.service }}
      
      - name: Run unit tests
        run: npm run test:coverage
        working-directory: ${{ matrix.service }}
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ${{ matrix.service }}/coverage/lcov.info
          flags: ${{ matrix.service }}

  # Stage 2b: E2E Tests
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Start services
        run: |
          docker-compose up -d --build
          sleep 30
      
      - name: Install Cypress
        run: npm ci
        working-directory: dashboard
      
      - name: Run Cypress tests
        run: npm run cypress:run
        working-directory: dashboard
      
      - name: Stop services
        run: docker-compose down

  # Stage 3: Build & Docker
  build:
    name: Build & Docker
    runs-on: ubuntu-latest
    needs: [test, e2e]
    strategy:
      matrix:
        service: [backend, dashboard]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service }}
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ice-truck-${{ matrix.service }}:latest
            ${{ secrets.DOCKER_USERNAME }}/ice-truck-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Stage 4: Infrastructure & Deploy
  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Terraform Init
        run: terraform init
        working-directory: infra/terraform
      
      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: infra/terraform
        env:
          TF_VAR_docker_image_backend: ${{ secrets.DOCKER_USERNAME }}/ice-truck-backend:${{ github.sha }}
          TF_VAR_docker_image_dashboard: ${{ secrets.DOCKER_USERNAME }}/ice-truck-dashboard:${{ github.sha }}
      
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: infra/terraform

  # Stage 5: Health Checks
  health-check:
    name: Post-Deploy Health Checks
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v4
      
      - name: Wait for deployment
        run: sleep 60
      
      - name: Health check backend
        run: |
          curl -f ${{ secrets.BACKEND_URL }}/api/v1/health || exit 1
      
      - name: Health check dashboard
        run: |
          curl -f ${{ secrets.DASHBOARD_URL }} || exit 1
      
      - name: Run smoke tests
        run: |
          npm ci
          npm run test:smoke
        working-directory: dashboard

  # Stage 6: Notifications
  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [health-check]
    if: always()
    steps:
      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#ice-truck-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
      
      - name: LINE Notification
        if: failure()
        run: |
          curl -X POST https://notify-api.line.me/api/notify \
            -H "Authorization: Bearer ${{ secrets.LINE_TOKEN }}" \
            -F "message=ðŸš¨ Ice Truck Deployment Failed: ${{ github.sha }}"